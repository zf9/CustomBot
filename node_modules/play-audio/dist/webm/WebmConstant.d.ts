/// <reference types="node" />
export declare enum DataType {
    master = 0,
    string = 1,
    uint = 2,
    binary = 3,
    float = 4
}
export declare const DataReturn: {
    string: (buf: Buffer) => string;
    uint: (buf: Buffer) => number;
    float: (buf: Buffer) => number;
};
export declare type DataReturnType = (buf: Buffer) => string | number;
export interface EBML {
    version?: number;
    readVersion?: number;
    maxIDLength?: number;
    maxSizeWidth?: number;
    docType?: string;
    docTypeVersion?: number;
    docTypeReadVersion?: number;
}
export interface Seek {
    position?: number;
}
export declare type SeekHead = Seek[];
export interface Info {
    duration?: number;
    muxingApp?: string;
    writingApp?: string;
}
export declare type Tracks = TracksEntry[];
export interface TracksEntry {
    trackNumber?: number;
    trackType?: number;
    codecID?: string;
    audio?: Audio;
}
export interface Audio {
    rate?: number;
    channels?: number;
    bitDepth?: number;
}
export interface CuePoint {
    time?: number;
    track?: number;
    position?: number;
}
export declare type Cues = CuePoint[];
export interface Cluster {
    time?: number;
}
export interface Segment {
    seekHead?: SeekHead;
    info?: Info;
    tracks?: Tracks;
    cues?: Cues;
    cluster?: Cluster;
}
export interface ElementsData {
    name: string;
    type: DataType;
    return?: DataReturnType;
}
export declare type ElementsDataType = {
    [key: string]: ElementsData;
};
export declare const WebmElements: ElementsDataType;
//# sourceMappingURL=WebmConstant.d.ts.map