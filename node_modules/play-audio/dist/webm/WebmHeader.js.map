{"version":3,"file":"WebmHeader.js","sourceRoot":"","sources":["../../play-audio/webm/WebmHeader.ts"],"names":[],"mappings":"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","sourcesContent":["import { EBML, ElementsData, Segment } from \"./WebmConstant\";\r\n\r\n\r\nexport class WebmHeader {\r\n    ebml : EBML\r\n    segment : Segment\r\n    audioTrack : number\r\n\r\n    constructor(){\r\n        this.ebml = {}\r\n        this.segment = {}\r\n        this.audioTrack = -1\r\n    }\r\n\r\n    parse (ebmlID : ElementsData, chunk : Buffer){\r\n        \r\n        switch (ebmlID.name) {\r\n            case \"ebml\" :\r\n                this.ebml = {}\r\n                break;\r\n\r\n            case \"ebmlVersion\":\r\n                if(ebmlID.return) this.ebml.version = ebmlID.return(chunk) as number\r\n                break;\r\n\r\n            case \"ebmlReadVersion\":\r\n                if(ebmlID.return) this.ebml.readVersion = ebmlID.return(chunk) as number\r\n                break;\r\n\r\n            case \"ebmlMaxIDLength\" :\r\n                if(ebmlID.return) this.ebml.maxIDLength = ebmlID.return(chunk) as number\r\n                break;\r\n\r\n            case \"ebmlMaxSizeLength\" :\r\n                if(ebmlID.return) this.ebml.maxSizeWidth = ebmlID.return(chunk) as number\r\n                break;\r\n            \r\n            case \"docType\" :\r\n                if(ebmlID.return) {\r\n                    const doctype = ebmlID.return(chunk) as string\r\n                    if (doctype !== 'webm') return new Error(\"This is not a Webm Stream. [ DocType !== webm ]\")\r\n                    else this.ebml.docType = doctype\r\n                }\r\n                break;\r\n            \r\n            case \"docTypeVersion\" :\r\n                if(ebmlID.return) this.ebml.docTypeVersion = ebmlID.return(chunk) as number\r\n                break;\r\n\r\n            case \"docTypeReadVersion\" :\r\n                if(ebmlID.return) this.ebml.docTypeReadVersion = ebmlID.return(chunk) as number\r\n                break;\r\n\r\n            case \"segment\" :\r\n                this.segment = {}\r\n                break\r\n\r\n            case \"seekHead\" :\r\n                this.segment.seekHead = []\r\n                break\r\n\r\n            case \"seekPosition\" :\r\n                if(ebmlID.return)\r\n                this.segment.seekHead!.push({ position : ebmlID.return(chunk) as number })\r\n                break\r\n\r\n            case \"info\" :\r\n                this.segment.info = {}\r\n                break\r\n            \r\n            case \"duration\" :\r\n                if(ebmlID.return) this.segment.info!.duration = ebmlID.return(chunk) as number\r\n                break\r\n\r\n            case \"muxingApp\" :\r\n                if(ebmlID.return) this.segment.info!.muxingApp = ebmlID.return(chunk) as string\r\n                break\r\n\r\n            case \"writingApp\" :\r\n                if(ebmlID.return) this.segment.info!.writingApp = ebmlID.return(chunk) as string\r\n                break\r\n\r\n            case \"cluster\" :\r\n                this.segment.cluster = {}\r\n                break\r\n\r\n            case \"clusterTimecode\" :\r\n                if(ebmlID.return) this.segment.cluster!.time = ebmlID.return(chunk) as number\r\n                break\r\n\r\n            case \"simpleBlock\" :\r\n                break;\r\n\r\n            case \"tracks\" :\r\n                this.segment.tracks = []\r\n                break\r\n\r\n            case \"trackEntry\" :\r\n                this.segment.tracks!.push({})\r\n                break\r\n\r\n            case \"trackNumber\" :\r\n                if(ebmlID.return)\r\n                    this.segment.tracks![this.segment.tracks!.length - 1].trackNumber = ebmlID.return(chunk) as number\r\n                break\r\n            \r\n            case \"trackType\" :\r\n                if(ebmlID.return){\r\n                    const type = ebmlID.return(chunk) as number\r\n                    if(type === 2) this.audioTrack = this.segment.tracks!.length - 1\r\n                    this.segment.tracks![this.segment.tracks!.length - 1].trackType = type\r\n                }\r\n                break\r\n\r\n            case \"codecID\" :\r\n                if(ebmlID.return){\r\n                    const codec = ebmlID.return(chunk) as string\r\n                    if(codec !== 'A_OPUS' && this.segment.tracks![this.segment.tracks!.length - 1].trackType === 2) \r\n                        return new Error(\"Audio Codec is not OPUS\")\r\n                    this.segment.tracks![this.segment.tracks!.length - 1].codecID = codec\r\n                }\r\n                break\r\n\r\n            case \"audio\" :\r\n                this.segment.tracks![this.segment.tracks!.length - 1].audio = {}\r\n                break\r\n\r\n            case \"samplingFrequency\" :\r\n                if(ebmlID.return)\r\n                    this.segment.tracks![this.segment.tracks!.length - 1].audio!.rate = ebmlID.return(chunk) as number\r\n                break\r\n\r\n            case \"channels\" :\r\n                if(ebmlID.return)\r\n                    this.segment.tracks![this.segment.tracks!.length - 1].audio!.channels = ebmlID.return(chunk) as number\r\n                break\r\n\r\n            case \"bitDepth\" :\r\n                if(ebmlID.return)\r\n                    this.segment.tracks![this.segment.tracks!.length - 1].audio!.bitDepth = ebmlID.return(chunk) as number\r\n                break\r\n\r\n            case \"cues\" :\r\n                this.segment.cues = []\r\n                break\r\n\r\n            case \"cuePoint\" :\r\n                this.segment.cues!.push({})\r\n                break\r\n\r\n            case \"cueTime\" :\r\n                if(ebmlID.return)\r\n                    this.segment.cues![this.segment.cues!.length - 1].time = ebmlID.return(chunk) as number\r\n                break\r\n\r\n            case \"cueTrack\" :\r\n                if(ebmlID.return)\r\n                    this.segment.cues![this.segment.cues!.length - 1].track = ebmlID.return(chunk) as number\r\n                break\r\n            \r\n            case \"cueClusterPosition\" :\r\n                if(ebmlID.return)\r\n                    this.segment.cues![this.segment.cues!.length - 1].position = ebmlID.return(chunk) as number\r\n                break\r\n            \r\n            default :\r\n                break\r\n        }\r\n\r\n    }\r\n}"]}