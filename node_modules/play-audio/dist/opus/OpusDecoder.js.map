{"version":3,"file":"OpusDecoder.js","sourceRoot":"","sources":["../../play-audio/opus/OpusDecoder.ts"],"names":[],"mappings":";;;AAAA,iDAAwE;AAExE,MAAM,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AAC1C,MAAM,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AAE1C,MAAa,WAAY,SAAQ,+BAAgB;IAI7C,YAAY,OAA6B;QACrC,KAAK,CAAC,OAAO,CAAC,CAAC;IACnB,CAAC;IAEM,MAAM,CAAC,KAAa,EAAE,CAAiB,EAAE,IAAoC;QAChF,IAAI,KAAK,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,EAAE;YAC5C,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;YACtB,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;SAChC;aAAM,IAAI,KAAK,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,EAAE;YACnD,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;YACtB,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;SAChC;aAAM;YACH,IAAI,KAAa,CAAC;YAClB,IAAI;gBACA,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;aACtC;YAAC,OAAO,GAAQ,EAAE;gBACf,IAAI,CAAC,GAAG,CAAC,CAAC;gBACV,OAAO;aACV;YACD,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACpB;QACD,IAAI,EAAE,CAAC;IACX,CAAC;IAED,QAAQ,CAAC,GAAW,EAAE,KAAa;QAC/B,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;IACxC,CAAC;CACJ;AA/BD,kCA+BC","sourcesContent":["import { OpusDuplexStream, OpusTransformOptions } from './DuplexStream';\n\nconst OPUS_HEAD = Buffer.from('OpusHead');\nconst OPUS_TAGS = Buffer.from('OpusTags');\n\nexport class OpusDecoder extends OpusDuplexStream {\n    opusHead?: Buffer;\n    opusTags?: Buffer;\n\n    constructor(options: OpusTransformOptions) {\n        super(options);\n    }\n\n    public _write(chunk: Buffer, _: BufferEncoding, done: (error?: Error | null) => void): void {\n        if (chunk.compare(OPUS_HEAD, 0, 8, 0, 8) === 0) {\n            this.opusHead = chunk;\n            this.emit('opusHead', chunk);\n        } else if (chunk.compare(OPUS_TAGS, 0, 8, 0, 8) === 0) {\n            this.opusTags = chunk;\n            this.emit('opusTags', chunk);\n        } else {\n            let frame: Buffer;\n            try {\n                frame = this.encoder.decode(chunk);\n            } catch (err: any) {\n                done(err);\n                return;\n            }\n            this.push(frame);\n        }\n        done();\n    }\n\n    applyCTL(ctl: number, value: number) {\n        this.encoder.decode_ctl(ctl, value);\n    }\n}\n"]}