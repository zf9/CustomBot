"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpusDuplexStream = exports.OpusCTL = void 0;
const stream_1 = require("stream");
const loader_1 = require("./modules/loader");
var OpusCTL;
(function (OpusCTL) {
    OpusCTL[OpusCTL["SetBitrate"] = 4002] = "SetBitrate";
    OpusCTL[OpusCTL["SetFEC"] = 4012] = "SetFEC";
    OpusCTL[OpusCTL["SetPLP"] = 4014] = "SetPLP";
})(OpusCTL = exports.OpusCTL || (exports.OpusCTL = {}));
class OpusDuplexStream extends stream_1.Duplex {
    constructor(options) {
        super(options.duplex);
        const handler = (0, loader_1.createOpusHandler)(options, options.encoder);
        if (handler instanceof Error)
            throw handler;
        this.encoder = handler;
        this.pcm_length = options.frameSize * options.channels * 2;
    }
    encode(buf) {
        return this.encoder.encode(buf);
    }
    decode(buffer) {
        return this.encoder.decode(buffer);
    }
    cleanup() {
        this.encoder.delete();
    }
    _read() { }
    _destroy(error, callback) {
        this.cleanup();
        callback(error);
    }
    _final(callback) {
        this.cleanup();
        callback();
    }
    bitrate(bitrate) {
        return this.applyCTL(OpusCTL.SetBitrate, bitrate);
    }
    setFEC(enabled) {
        return this.applyCTL(OpusCTL.SetFEC, enabled ? 1 : 0);
    }
    setPLP(percentage) {
        return this.applyCTL(OpusCTL.SetPLP, Math.min(100, Math.max(0, percentage * 100)));
    }
}
exports.OpusDuplexStream = OpusDuplexStream;
//# sourceMappingURL=DuplexStream.js.map