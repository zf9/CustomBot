{"version":3,"file":"OpusEncoder.js","sourceRoot":"","sources":["../../play-audio/opus/OpusEncoder.ts"],"names":[],"mappings":";;;AAAA,iDAAwE;AAExE,MAAa,WAAY,SAAQ,+BAAgB;IAG7C,YAAY,OAA6B;QACrC,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;IAC3C,CAAC;IAEM,MAAM,CAAC,KAAa,EAAE,CAAiB,EAAE,IAAoC;QAChF,MAAM,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC,CAAC;QAExD,IAAI,CAAC,GAAG,CAAC,CAAC;QACV,OAAO,QAAQ,CAAC,MAAM,IAAI,CAAC,GAAG,IAAI,CAAC,UAAU,EAAE;YAC3C,MAAM,GAAG,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC;YAEnD,IAAI,IAAY,CAAC;YAEjB,IAAI;gBACA,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;aAC3B;YAAC,OAAO,GAAQ,EAAE;gBACf,IAAI,CAAC,GAAG,CAAC,CAAC;gBACV,OAAO;aACV;YACD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAChB,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC;SACxB;QAED,IAAI,CAAC,GAAG,CAAC;YAAE,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAC9C,IAAI,EAAE,CAAC;IACX,CAAC;IAED,QAAQ,CAAC,GAAW,EAAE,KAAa;QAC/B,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;IACxC,CAAC;CACJ;AAlCD,kCAkCC","sourcesContent":["import { OpusDuplexStream, OpusTransformOptions } from './DuplexStream';\n\nexport class OpusEncoder extends OpusDuplexStream {\n    private remaining: Buffer;\n\n    constructor(options: OpusTransformOptions) {\n        super(options);\n        this.remaining = Buffer.allocUnsafe(0);\n    }\n\n    public _write(chunk: Buffer, _: BufferEncoding, done: (error?: Error | null) => void): void {\n        const pcmChunk = Buffer.concat([this.remaining, chunk]);\n\n        let i = 0;\n        while (pcmChunk.length >= i + this.pcm_length) {\n            const pcm = pcmChunk.slice(i, i + this.pcm_length);\n\n            let opus: Buffer;\n\n            try {\n                opus = this.encode(pcm);\n            } catch (err: any) {\n                done(err);\n                return;\n            }\n            this.push(opus);\n            i += this.pcm_length;\n        }\n\n        if (i > 0) this.remaining = pcmChunk.slice(i);\n        done();\n    }\n\n    applyCTL(ctl: number, value: number) {\n        this.encoder.encode_ctl(ctl, value);\n    }\n}\n"]}