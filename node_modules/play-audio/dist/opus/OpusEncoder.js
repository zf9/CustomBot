"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpusEncoder = void 0;
const DuplexStream_1 = require("./DuplexStream");
class OpusEncoder extends DuplexStream_1.OpusDuplexStream {
    constructor(options) {
        super(options);
        this.remaining = Buffer.allocUnsafe(0);
    }
    _write(chunk, _, done) {
        const pcmChunk = Buffer.concat([this.remaining, chunk]);
        let i = 0;
        while (pcmChunk.length >= i + this.pcm_length) {
            const pcm = pcmChunk.slice(i, i + this.pcm_length);
            let opus;
            try {
                opus = this.encode(pcm);
            }
            catch (err) {
                done(err);
                return;
            }
            this.push(opus);
            i += this.pcm_length;
        }
        if (i > 0)
            this.remaining = pcmChunk.slice(i);
        done();
    }
    applyCTL(ctl, value) {
        this.encoder.encode_ctl(ctl, value);
    }
}
exports.OpusEncoder = OpusEncoder;
//# sourceMappingURL=OpusEncoder.js.map