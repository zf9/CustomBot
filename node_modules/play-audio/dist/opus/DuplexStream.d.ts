/// <reference types="node" />
import { Duplex, DuplexOptions } from 'stream';
import { OpusHandlerOptions } from './modules/constant';
import { OpusEncoder } from './modules/loader';
export declare enum OpusCTL {
    SetBitrate = 4002,
    SetFEC = 4012,
    SetPLP = 4014
}
export interface OpusTransformOptions extends OpusHandlerOptions {
    encoder?: 'play-opus' | 'opusscript';
    duplex?: DuplexOptions;
}
export declare abstract class OpusDuplexStream extends Duplex {
    protected pcm_length: number;
    protected encoder: OpusEncoder;
    constructor(options: OpusTransformOptions);
    protected encode(buf: Buffer): Buffer;
    protected decode(buffer: Buffer): Buffer;
    private cleanup;
    _read(): void;
    _destroy(error: Error | null, callback: (error: Error | null) => void): void;
    abstract _write(chunk: Buffer, enc: BufferEncoding, next: (error?: Error | null) => void): void;
    _final(callback: (error?: Error | null) => void): void;
    abstract applyCTL(ctl: number, value: number): void;
    bitrate(bitrate: number): void;
    setFEC(enabled: boolean): void;
    setPLP(percentage: number): void;
}
//# sourceMappingURL=DuplexStream.d.ts.map