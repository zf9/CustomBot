{"version":3,"file":"DuplexStream.js","sourceRoot":"","sources":["../../play-audio/opus/DuplexStream.ts"],"names":[],"mappings":";;;AAAA,mCAA+C;AAE/C,6CAAkE;AAElE,IAAY,OAIX;AAJD,WAAY,OAAO;IACf,oDAAiB,CAAA;IACjB,4CAAa,CAAA;IACb,4CAAa,CAAA;AACjB,CAAC,EAJW,OAAO,GAAP,eAAO,KAAP,eAAO,QAIlB;AAOD,MAAsB,gBAAiB,SAAQ,eAAM;IAIjD,YAAY,OAA6B;QACrC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QACtB,MAAM,OAAO,GAAG,IAAA,0BAAiB,EAAC,OAAO,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC;QAC5D,IAAI,OAAO,YAAY,KAAK;YAAE,MAAM,OAAO,CAAC;QAC5C,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,SAAS,GAAG,OAAO,CAAC,QAAQ,GAAG,CAAC,CAAC;IAC/D,CAAC;IAES,MAAM,CAAC,GAAW;QACxB,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IACpC,CAAC;IAES,MAAM,CAAC,MAAc;QAC3B,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IACvC,CAAC;IAEO,OAAO;QACX,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;IAC1B,CAAC;IAED,KAAK,KAAI,CAAC;IAEV,QAAQ,CAAC,KAAmB,EAAE,QAAwC;QAClE,IAAI,CAAC,OAAO,EAAE,CAAC;QACf,QAAQ,CAAC,KAAK,CAAC,CAAC;IACpB,CAAC;IAID,MAAM,CAAC,QAAwC;QAC3C,IAAI,CAAC,OAAO,EAAE,CAAC;QACf,QAAQ,EAAE,CAAC;IACf,CAAC;IAIM,OAAO,CAAC,OAAe;QAC1B,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;IACtD,CAAC;IAEM,MAAM,CAAC,OAAgB;QAC1B,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1D,CAAC;IAEM,MAAM,CAAC,UAAkB;QAC5B,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;IACvF,CAAC;CACJ;AAnDD,4CAmDC","sourcesContent":["import { Duplex, DuplexOptions } from 'stream';\nimport { OpusHandlerOptions } from './modules/constant';\nimport { createOpusHandler, OpusEncoder } from './modules/loader';\n\nexport enum OpusCTL {\n    SetBitrate = 4002,\n    SetFEC = 4012,\n    SetPLP = 4014\n}\n\nexport interface OpusTransformOptions extends OpusHandlerOptions {\n    encoder?: 'play-opus' | 'opusscript';\n    duplex?: DuplexOptions;\n}\n\nexport abstract class OpusDuplexStream extends Duplex {\n    protected pcm_length: number;\n    protected encoder: OpusEncoder;\n\n    constructor(options: OpusTransformOptions) {\n        super(options.duplex);\n        const handler = createOpusHandler(options, options.encoder);\n        if (handler instanceof Error) throw handler;\n        this.encoder = handler;\n        this.pcm_length = options.frameSize * options.channels * 2;\n    }\n\n    protected encode(buf: Buffer) {\n        return this.encoder.encode(buf);\n    }\n\n    protected decode(buffer: Buffer) {\n        return this.encoder.decode(buffer);\n    }\n\n    private cleanup() {\n        this.encoder.delete();\n    }\n\n    _read() {}\n\n    _destroy(error: Error | null, callback: (error : Error | null) => void): void {\n        this.cleanup();\n        callback(error);\n    }\n\n    public abstract _write(chunk: Buffer, enc: BufferEncoding, next: (error?: Error | null) => void): void;\n\n    _final(callback: (error?: Error | null) => void) : void {\n        this.cleanup();\n        callback();\n    }\n\n    public abstract applyCTL(ctl: number, value: number): void;\n\n    public bitrate(bitrate: number) {\n        return this.applyCTL(OpusCTL.SetBitrate, bitrate);\n    }\n\n    public setFEC(enabled: boolean) {\n        return this.applyCTL(OpusCTL.SetFEC, enabled ? 1 : 0);\n    }\n\n    public setPLP(percentage: number) {\n        return this.applyCTL(OpusCTL.SetPLP, Math.min(100, Math.max(0, percentage * 100)));\n    }\n}\n"]}